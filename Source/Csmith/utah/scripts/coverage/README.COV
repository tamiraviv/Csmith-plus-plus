
- This is the README for coverage tests

************************************************************
- Quick start to build optimized compilers:
  * setup $COV_BASE_HOME environment, e.g in bash:
    export COV_BASE_HOME=/uusoc/exports/scratch/chenyang/branch-test,
    where holds all coverage stuff

  * cd $COV_BASE_HOME
    mkdir sources

    and check out csmith:

    svn co svn+ssh://bas.flux.utah.edu/home/eeide/cs6110/project/svn/csmith/trunk csmith

  * cd csmith/utah/scripts

  * ./build_gcov_compilers.pl -enable-opt

  * optimized gcc and clang were installed in $COV_BASE_HOME/bin

************************************************************

- Coverage test steps:

  * setup $COV_BASE_HOME environment, e.g in bash:
    export COV_BASE_HOME=/uusoc/exports/scratch/chenyang/branch-test,
    where holds all coverage stuff

  * cd $COV_BASE_HOME
    mkdir sources

    and check out csmith:

    svn co svn+ssh://bas.flux.utah.edu/home/eeide/cs6110/project/svn/csmith/trunk csmith

    and the hacked lcov:

    svn co svn+ssh://shell.cs.utah.edu/uusoc/res/embed/users/regehr/embedded_code_repo/yang/coverage/lcov-1.8 lcov-1.8

  * run build_gcov_compilers.pl script, which will:

    - download compilers sources to $COV_BASE_HOME/sources;

    - build compilers with appropriate options

    - install compilers to $COV_BASE_HOME

  * run gen_cov.pl, which will run coverage tests for llvm and gcc. 
    For each tested compilers, the script will:

    - run the compilers' testsuite,

    - generate coverage data for the above test, two important data:
      ${compiler}_summary.txt: At the bottom of this file, you will see the summary
       of line, function and branch coverage;
  
      ${compiler}_html: this dir contains all coverage htmls

    - run csmith to generate 10,000 random programs, and compile those programs
      using the tested compilers;

    - generate accumulated coverage data:

      ${compiler}_summary_ext.txt and ${compiler}_html_ext

